from typing import Callable, Any
import functools


def log_call(func: Callable[..., Any]) -> Callable[..., Any]:
    """
    Logs the function call with arguments.
    """
    @functools.wraps(func)
    def wrapper(*args: Any, **kwargs: Any) -> Any:
        print(f"Calling {func.__name__} with args={args}, kwargs={kwargs}")
        return func(*args, **kwargs)
    return wrapper


def require_permission(permission: str) -> Callable[[Callable[..., Any]], Callable[..., Any]]:
    """
    Decorator that checks if user has a required permission.
    """
    def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
        @functools.wraps(func)
        def wrapper(*args: Any, **kwargs: Any) -> Any:
            # Replace this with real permission logic
            print(f"Checking permission: {permission}")
            return func(*args, **kwargs)
        return wrapper
    return decorator


def validate_input(func: Callable[..., Any]) -> Callable[..., Any]:
    """
    Validates input arguments before calling the function.
    """
    @functools.wraps(func)
    def wrapper(*args: Any, **kwargs: Any) -> Any:
        print("Validating inputs...")
        return func(*args, **kwargs)
    return wrapper
